// js/basic-data-cleaning.js
const { uncleanedData } = require('./uncleaned-data.js');
const fs = require('fs');

function standardizeString(str, keepLowerCase = false) {
  if (!str || typeof str !== 'string') return str;
  if (keepLowerCase) {
    return str.trim().toLowerCase();
  }
  return str
    .trim()
    .split(/\s+/)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
}

function cleanData(data) {
  return data.map(item => {
    const cleanedItem = { ...item };
    const stringFields = [
      { field: 'Date', keepLowerCase: false },
      { field: 'EventType', keepLowerCase: true },
      { field: 'Event', keepLowerCase: false },
      { field: 'Player', keepLowerCase: false },
      { field: 'Deck', keepLowerCase: false }
    ];
    
    stringFields.forEach(({ field, keepLowerCase }) => {
      if (cleanedItem[field]) {
        cleanedItem[field] = standardizeString(cleanedItem[field], keepLowerCase);
      }
    });

    const totalGames = cleanedItem.Wins + cleanedItem.Losses;
    cleanedItem['Win Rate'] = totalGames > 0 ? cleanedItem.Wins / totalGames : 0;

    return cleanedItem;
  });
}

try {
  const mockData = cleanData(uncleanedData);
  const fileContent = `// js/data.js

/* This file was generated by basic-data-cleaning.js on ${new Date().toISOString()}.
   It contains cleaned data with standardized casing and trimmed whitespace.
   EventType is kept lowercase (offline/online).
*/
export const cleanedData = ${JSON.stringify(mockData, null, 2)};
`;

  fs.writeFileSync('./data.js', fileContent, 'utf8');
  console.log('data.js has been updated with cleaned mockData.');
} catch (error) {
  console.error('Error cleaning data or writing file:', error);
}